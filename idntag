#!/usr/bin/env python3

# Copyright (c) 2018-2022 Kristofer Berggren
# All rights reserved.
#
# idntag is distributed under the MIT license, see LICENSE for details.

import acoustid
import argparse
import base64
import glob
import os
import re
import taglib
import time


def rate_limit(min_interval):
    try:
        sleep_duration = min_interval - (time.time() - rate_limit.last_timestamp)
    except AttributeError:
        sleep_duration = 0

    if sleep_duration > 0:
        time.sleep(sleep_duration)

    rate_limit.last_timestamp = time.time()


def cleanstr(str):
    return re.sub(r'\W+', '', str.replace(" ", "_"))


def identify_and_update_file(path, keep_name, uselib):
    rate_limit(1.0/3.0)
    print(path + " : ", end='')
    try:
        fpcalc = not uselib
        results = list(acoustid.match(base64.b64decode(b'SGU2STZBWUtOMQ=='), path, force_fpcalc=fpcalc))
    except acoustid.NoBackendError:
        print("FAIL : backend library not found")
        return False
    except acoustid.FingerprintGenerationError:
        print("FAIL : fingerprint generation error")
        return False
    except acoustid.WebServiceError as exc:
        print("FAIL : web service error (" + exc.message + ")")
        return False

    if len(results) == 0:
        print("FAIL : no matches found")
        return False

    score, rid, title, artist = best_result(results)
    song = taglib.File(path)
    song.tags["ARTIST"] = [artist if artist else "Unknown"]
    song.tags["TITLE"] = [title if title else "Unknown"]
    song.save()

    newpath = path
    if not keep_name:
        olddir, oldfile = os.path.split(path)
        oldfile, oldext = os.path.splitext(path)
        newpath = olddir + "/" + cleanstr(artist) + "-" + cleanstr(title) + oldext
        # XXX: todo check if file exists before overwriting?
        os.rename(path, newpath)

    print("OK : " + newpath)
    return True


def best_result(results):
    """
    Returns the best result with non empty fields (sorted by score),
    first one if all results have a missing field.
    """
    results.sort(key=lambda r: r[0], reverse=True)
    for r in results:
        if not None in r:
            return r[0], r[1], r[2], r[3]

    return result[0][0], result[0][1], result[0][2], result[0][3]


def main():
    parser = argparse.ArgumentParser(prog="idntag", description=
                                     "Identify artist and song name from specified "
                                     "audio files and update their ID3-tag meta-data "
                                     "with correct data, and rename the files on format "
                                     "Artist_Name-Track_Name.")
    parser.add_argument("-k", "--keepname", action="store_true", help="keep original filename")
    parser.add_argument("-l", "--uselib", action="store_true", help="use chromaprint lib instead of tools")
    parser.add_argument("-v", "--version", action='version', version='%(prog)s v1.05')
    parser.add_argument('path', nargs='+', help='path of a file or directory')
    args = parser.parse_args()

    abs_paths = [os.path.join(os.getcwd(), path) for path in args.path]
    paths = set()
    for path in abs_paths:
        if os.path.isfile(path):
            paths.add(path)
        elif os.path.isdir(path):
            abs_paths += glob.glob(path + '/*')

    for path in paths:
        identify_and_update_file(path, args.keepname, args.uselib)


if __name__ == "__main__":
    main()
